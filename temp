typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct {
    Node* front; // 指向隊首節點
    Node* rear;  // 指向隊尾節點(新加入的節點)
    int size;
} MyStack;

MyStack* myStackCreate() {
    MyStack* obj = (MyStack*)malloc(sizeof(MyStack));

    obj->front = NULL;
    obj->rear = NULL;
    obj->size = 0;
    return obj;
}

void myStackPush(MyStack* obj, int x) {
    MyStack* new_node = (MyStack*)malloc(sizeof(MyStack));
    new_node->val = x;
    mew_node->next = NULL;

    if (obj->rear) { // 若queue不為空
        obj->rear->next = temp;
    } else {
        obj->front = temp;
    }
    obj->rear = temp;
    obj->size++;
}

int myStackPop(MyStack* obj) {
    int target = obj->rear->val;
    if (obj->front == obj->rear) { // 若queue為空
        free(obj->rear);
        obj->front = NULL;
        obj->rear = NULL;
    } 
    else {
        Node_t* prev = obj->front;
        // 移动至queue尾部节点前一个节点
        while (prev->next != obj->rear) {
            prev = prev->next;
        }

        free(obj->rear);
        obj->rear = prev;
        obj->rear->next = NULL;
    }

    obj->size--;
    return target;
}

int myStackTop(MyStack* obj) {}

bool myStackEmpty(MyStack* obj) {}

void myStackFree(MyStack* obj) {}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);

 * int param_2 = myStackPop(obj);

 * int param_3 = myStackTop(obj);

 * bool param_4 = myStackEmpty(obj);

 * myStackFree(obj);
*/
